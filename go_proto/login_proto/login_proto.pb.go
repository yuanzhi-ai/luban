// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: protocal/login_proto/login_proto.proto

// 登录相关协议

package login_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VerType int32

const (
	VerType_Invalid         VerType = 0 // 非法的验证
	VerType_LoginVerify     VerType = 1 //登录验证
	VerType_RegisterVerify  VerType = 2 //注册验证
	VerType_ResetPsWdVerify VerType = 3 // 重置密码
)

// Enum value maps for VerType.
var (
	VerType_name = map[int32]string{
		0: "Invalid",
		1: "LoginVerify",
		2: "RegisterVerify",
		3: "ResetPsWdVerify",
	}
	VerType_value = map[string]int32{
		"Invalid":         0,
		"LoginVerify":     1,
		"RegisterVerify":  2,
		"ResetPsWdVerify": 3,
	}
)

func (x VerType) Enum() *VerType {
	p := new(VerType)
	*p = x
	return p
}

func (x VerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocal_login_proto_login_proto_proto_enumTypes[0].Descriptor()
}

func (VerType) Type() protoreflect.EnumType {
	return &file_protocal_login_proto_login_proto_proto_enumTypes[0]
}

func (x VerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerType.Descriptor instead.
func (VerType) EnumDescriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{0}
}

type EmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyReq) Reset() {
	*x = EmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReq) ProtoMessage() {}

func (x *EmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReq.ProtoReflect.Descriptor instead.
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{0}
}

type EmptyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRsp) Reset() {
	*x = EmptyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRsp) ProtoMessage() {}

func (x *EmptyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRsp.ProtoReflect.Descriptor instead.
func (*EmptyRsp) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{1}
}

// 获取人机验证码
type GetMachineVerifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMachineVerifyReq) Reset() {
	*x = GetMachineVerifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineVerifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineVerifyReq) ProtoMessage() {}

func (x *GetMachineVerifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineVerifyReq.ProtoReflect.Descriptor instead.
func (*GetMachineVerifyReq) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{2}
}

type GetMachineVerifyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeId    string `protobuf:"bytes,1,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`          // 验证码的id
	Base64Img string `protobuf:"bytes,2,opt,name=base64_img,json=base64Img,proto3" json:"base64_img,omitempty"` // base64表示的验证码
	RetCode   int32  `protobuf:"varint,3,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`      // 错误码 0成功 其他失败
}

func (x *GetMachineVerifyRsp) Reset() {
	*x = GetMachineVerifyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineVerifyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineVerifyRsp) ProtoMessage() {}

func (x *GetMachineVerifyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineVerifyRsp.ProtoReflect.Descriptor instead.
func (*GetMachineVerifyRsp) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{3}
}

func (x *GetMachineVerifyRsp) GetCodeId() string {
	if x != nil {
		return x.CodeId
	}
	return ""
}

func (x *GetMachineVerifyRsp) GetBase64Img() string {
	if x != nil {
		return x.Base64Img
	}
	return ""
}

func (x *GetMachineVerifyRsp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

// 发送人机验证结果请求包
type SendMachineVerifyResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeId string `protobuf:"bytes,1,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"` // 验证码的id
	Ans    string `protobuf:"bytes,2,opt,name=ans,proto3" json:"ans,omitempty"`                     // 用户的输入
}

func (x *SendMachineVerifyResultReq) Reset() {
	*x = SendMachineVerifyResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMachineVerifyResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMachineVerifyResultReq) ProtoMessage() {}

func (x *SendMachineVerifyResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMachineVerifyResultReq.ProtoReflect.Descriptor instead.
func (*SendMachineVerifyResultReq) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{4}
}

func (x *SendMachineVerifyResultReq) GetCodeId() string {
	if x != nil {
		return x.CodeId
	}
	return ""
}

func (x *SendMachineVerifyResultReq) GetAns() string {
	if x != nil {
		return x.Ans
	}
	return ""
}

type SendMachineVerifyResultRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32 `protobuf:"varint,2,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"` // 0成功 其他失败
}

func (x *SendMachineVerifyResultRsp) Reset() {
	*x = SendMachineVerifyResultRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMachineVerifyResultRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMachineVerifyResultRsp) ProtoMessage() {}

func (x *SendMachineVerifyResultRsp) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMachineVerifyResultRsp.ProtoReflect.Descriptor instead.
func (*SendMachineVerifyResultRsp) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{5}
}

func (x *SendMachineVerifyResultRsp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

// 向用户发送一个验证码短信求情包
type SendTextVerCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string  `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`               // 用户手机号
	VerType     VerType `protobuf:"varint,2,opt,name=ver_type,json=verType,proto3,enum=login_proto.VerType" json:"ver_type,omitempty"` // 验证的类型
}

func (x *SendTextVerCodeReq) Reset() {
	*x = SendTextVerCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTextVerCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTextVerCodeReq) ProtoMessage() {}

func (x *SendTextVerCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTextVerCodeReq.ProtoReflect.Descriptor instead.
func (*SendTextVerCodeReq) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{6}
}

func (x *SendTextVerCodeReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SendTextVerCodeReq) GetVerType() VerType {
	if x != nil {
		return x.VerType
	}
	return VerType_Invalid
}

type SendTextVerCodeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32 `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"` // 0成功，其他失败
}

func (x *SendTextVerCodeRsp) Reset() {
	*x = SendTextVerCodeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTextVerCodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTextVerCodeRsp) ProtoMessage() {}

func (x *SendTextVerCodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTextVerCodeRsp.ProtoReflect.Descriptor instead.
func (*SendTextVerCodeRsp) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{7}
}

func (x *SendTextVerCodeRsp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

// 用户密码登录
type UserPswdLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // 用户登录的手机号
	A1          string `protobuf:"bytes,2,opt,name=a1,proto3" json:"a1,omitempty"`                                      // 加密文本
}

func (x *UserPswdLoginReq) Reset() {
	*x = UserPswdLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPswdLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPswdLoginReq) ProtoMessage() {}

func (x *UserPswdLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPswdLoginReq.ProtoReflect.Descriptor instead.
func (*UserPswdLoginReq) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{8}
}

func (x *UserPswdLoginReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserPswdLoginReq) GetA1() string {
	if x != nil {
		return x.A1
	}
	return ""
}

type UserPswdLoginRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32 `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"` // 0 成功，其他失败
}

func (x *UserPswdLoginRsp) Reset() {
	*x = UserPswdLoginRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPswdLoginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPswdLoginRsp) ProtoMessage() {}

func (x *UserPswdLoginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPswdLoginRsp.ProtoReflect.Descriptor instead.
func (*UserPswdLoginRsp) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{9}
}

func (x *UserPswdLoginRsp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

// 手机号登录
type UserPhoneLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // 手机号码
	VerCode     string `protobuf:"bytes,2,opt,name=ver_code,json=verCode,proto3" json:"ver_code,omitempty"`             // 登录的验证码
}

func (x *UserPhoneLoginReq) Reset() {
	*x = UserPhoneLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPhoneLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPhoneLoginReq) ProtoMessage() {}

func (x *UserPhoneLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPhoneLoginReq.ProtoReflect.Descriptor instead.
func (*UserPhoneLoginReq) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{10}
}

func (x *UserPhoneLoginReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserPhoneLoginReq) GetVerCode() string {
	if x != nil {
		return x.VerCode
	}
	return ""
}

type UserPhoneLoginRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32 `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"` // 0 成功，其他失败
}

func (x *UserPhoneLoginRsp) Reset() {
	*x = UserPhoneLoginRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPhoneLoginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPhoneLoginRsp) ProtoMessage() {}

func (x *UserPhoneLoginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPhoneLoginRsp.ProtoReflect.Descriptor instead.
func (*UserPhoneLoginRsp) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{11}
}

func (x *UserPhoneLoginRsp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

// 用户注册
type UserRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // 手机号码
	VerCode     string `protobuf:"bytes,2,opt,name=ver_code,json=verCode,proto3" json:"ver_code,omitempty"`             // 验证码
}

func (x *UserRegisterReq) Reset() {
	*x = UserRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterReq) ProtoMessage() {}

func (x *UserRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterReq.ProtoReflect.Descriptor instead.
func (*UserRegisterReq) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{12}
}

func (x *UserRegisterReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserRegisterReq) GetVerCode() string {
	if x != nil {
		return x.VerCode
	}
	return ""
}

type UserRegisterRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32 `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"` //0成功 其他失败
}

func (x *UserRegisterRsp) Reset() {
	*x = UserRegisterRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegisterRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterRsp) ProtoMessage() {}

func (x *UserRegisterRsp) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterRsp.ProtoReflect.Descriptor instead.
func (*UserRegisterRsp) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{13}
}

func (x *UserRegisterRsp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

// 重置密码
type ResetPswdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` //重置的手机号
	NewPw       string `protobuf:"bytes,2,opt,name=new_pw,json=newPw,proto3" json:"new_pw,omitempty"`                   // 新密码
	VerCode     string `protobuf:"bytes,3,opt,name=ver_code,json=verCode,proto3" json:"ver_code,omitempty"`             // 验证码
}

func (x *ResetPswdReq) Reset() {
	*x = ResetPswdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPswdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPswdReq) ProtoMessage() {}

func (x *ResetPswdReq) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPswdReq.ProtoReflect.Descriptor instead.
func (*ResetPswdReq) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{14}
}

func (x *ResetPswdReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ResetPswdReq) GetNewPw() string {
	if x != nil {
		return x.NewPw
	}
	return ""
}

func (x *ResetPswdReq) GetVerCode() string {
	if x != nil {
		return x.VerCode
	}
	return ""
}

type ResetPswdRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32 `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"` //0成功，其他失败
}

func (x *ResetPswdRsp) Reset() {
	*x = ResetPswdRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocal_login_proto_login_proto_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPswdRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPswdRsp) ProtoMessage() {}

func (x *ResetPswdRsp) ProtoReflect() protoreflect.Message {
	mi := &file_protocal_login_proto_login_proto_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPswdRsp.ProtoReflect.Descriptor instead.
func (*ResetPswdRsp) Descriptor() ([]byte, []int) {
	return file_protocal_login_proto_login_proto_proto_rawDescGZIP(), []int{15}
}

func (x *ResetPswdRsp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

var File_protocal_login_proto_login_proto_proto protoreflect.FileDescriptor

var file_protocal_login_proto_login_proto_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x61, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0a, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x22, 0x0a, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x22, 0x15, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x22, 0x68, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x69,
	0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x49, 0x6d, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x47,
	0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x6e, 0x73, 0x22, 0x37, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x68, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x56, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2f, 0x0a, 0x12, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x56, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x45, 0x0a, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x73, 0x77, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x61, 0x31, 0x22, 0x2d, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x50, 0x73, 0x77, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x51, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x2e, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x63, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x73, 0x77, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x77, 0x50, 0x77, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x29, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x73, 0x77, 0x64, 0x52, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x2a, 0x50, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x73, 0x57, 0x64, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x10, 0x03, 0x32, 0xdf, 0x04, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x58, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x12, 0x20, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x17, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x56, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65,
	0x78, 0x74, 0x56, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x56, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x73, 0x77, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x73, 0x77, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x73, 0x77, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x73, 0x77, 0x64, 0x12,
	0x19, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x73, 0x77, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x73,
	0x77, 0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x34, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x61, 0x6e, 0x7a, 0x68, 0x69, 0x2d,
	0x61, 0x69, 0x2f, 0x6c, 0x75, 0x62, 0x61, 0x6e, 0x2f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocal_login_proto_login_proto_proto_rawDescOnce sync.Once
	file_protocal_login_proto_login_proto_proto_rawDescData = file_protocal_login_proto_login_proto_proto_rawDesc
)

func file_protocal_login_proto_login_proto_proto_rawDescGZIP() []byte {
	file_protocal_login_proto_login_proto_proto_rawDescOnce.Do(func() {
		file_protocal_login_proto_login_proto_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocal_login_proto_login_proto_proto_rawDescData)
	})
	return file_protocal_login_proto_login_proto_proto_rawDescData
}

var file_protocal_login_proto_login_proto_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protocal_login_proto_login_proto_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_protocal_login_proto_login_proto_proto_goTypes = []interface{}{
	(VerType)(0),                       // 0: login_proto.VerType
	(*EmptyReq)(nil),                   // 1: login_proto.EmptyReq
	(*EmptyRsp)(nil),                   // 2: login_proto.EmptyRsp
	(*GetMachineVerifyReq)(nil),        // 3: login_proto.GetMachineVerifyReq
	(*GetMachineVerifyRsp)(nil),        // 4: login_proto.GetMachineVerifyRsp
	(*SendMachineVerifyResultReq)(nil), // 5: login_proto.SendMachineVerifyResultReq
	(*SendMachineVerifyResultRsp)(nil), // 6: login_proto.SendMachineVerifyResultRsp
	(*SendTextVerCodeReq)(nil),         // 7: login_proto.SendTextVerCodeReq
	(*SendTextVerCodeRsp)(nil),         // 8: login_proto.SendTextVerCodeRsp
	(*UserPswdLoginReq)(nil),           // 9: login_proto.UserPswdLoginReq
	(*UserPswdLoginRsp)(nil),           // 10: login_proto.UserPswdLoginRsp
	(*UserPhoneLoginReq)(nil),          // 11: login_proto.UserPhoneLoginReq
	(*UserPhoneLoginRsp)(nil),          // 12: login_proto.UserPhoneLoginRsp
	(*UserRegisterReq)(nil),            // 13: login_proto.UserRegisterReq
	(*UserRegisterRsp)(nil),            // 14: login_proto.UserRegisterRsp
	(*ResetPswdReq)(nil),               // 15: login_proto.ResetPswdReq
	(*ResetPswdRsp)(nil),               // 16: login_proto.ResetPswdRsp
}
var file_protocal_login_proto_login_proto_proto_depIdxs = []int32{
	0,  // 0: login_proto.SendTextVerCodeReq.ver_type:type_name -> login_proto.VerType
	3,  // 1: login_proto.Login.GetMachineVerify:input_type -> login_proto.GetMachineVerifyReq
	5,  // 2: login_proto.Login.SendMachineVerifyResult:input_type -> login_proto.SendMachineVerifyResultReq
	7,  // 3: login_proto.Login.SendTextVerCode:input_type -> login_proto.SendTextVerCodeReq
	9,  // 4: login_proto.Login.UserPswdLogin:input_type -> login_proto.UserPswdLoginReq
	11, // 5: login_proto.Login.UserPhoneLogin:input_type -> login_proto.UserPhoneLoginReq
	13, // 6: login_proto.Login.UserRegister:input_type -> login_proto.UserRegisterReq
	15, // 7: login_proto.Login.ResetPswd:input_type -> login_proto.ResetPswdReq
	4,  // 8: login_proto.Login.GetMachineVerify:output_type -> login_proto.GetMachineVerifyRsp
	6,  // 9: login_proto.Login.SendMachineVerifyResult:output_type -> login_proto.SendMachineVerifyResultRsp
	8,  // 10: login_proto.Login.SendTextVerCode:output_type -> login_proto.SendTextVerCodeRsp
	10, // 11: login_proto.Login.UserPswdLogin:output_type -> login_proto.UserPswdLoginRsp
	12, // 12: login_proto.Login.UserPhoneLogin:output_type -> login_proto.UserPhoneLoginRsp
	14, // 13: login_proto.Login.UserRegister:output_type -> login_proto.UserRegisterRsp
	16, // 14: login_proto.Login.ResetPswd:output_type -> login_proto.ResetPswdRsp
	8,  // [8:15] is the sub-list for method output_type
	1,  // [1:8] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_protocal_login_proto_login_proto_proto_init() }
func file_protocal_login_proto_login_proto_proto_init() {
	if File_protocal_login_proto_login_proto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocal_login_proto_login_proto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineVerifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineVerifyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMachineVerifyResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMachineVerifyResultRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTextVerCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTextVerCodeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPswdLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPswdLoginRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPhoneLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPhoneLoginRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegisterRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPswdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocal_login_proto_login_proto_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPswdRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocal_login_proto_login_proto_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocal_login_proto_login_proto_proto_goTypes,
		DependencyIndexes: file_protocal_login_proto_login_proto_proto_depIdxs,
		EnumInfos:         file_protocal_login_proto_login_proto_proto_enumTypes,
		MessageInfos:      file_protocal_login_proto_login_proto_proto_msgTypes,
	}.Build()
	File_protocal_login_proto_login_proto_proto = out.File
	file_protocal_login_proto_login_proto_proto_rawDesc = nil
	file_protocal_login_proto_login_proto_proto_goTypes = nil
	file_protocal_login_proto_login_proto_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LoginClient is the client API for Login service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoginClient interface {
	// 获取人机验证问题
	GetMachineVerify(ctx context.Context, in *GetMachineVerifyReq, opts ...grpc.CallOption) (*GetMachineVerifyRsp, error)
	// 发送人机验证结果
	SendMachineVerifyResult(ctx context.Context, in *SendMachineVerifyResultReq, opts ...grpc.CallOption) (*SendMachineVerifyResultRsp, error)
	// 发送短信验证码
	SendTextVerCode(ctx context.Context, in *SendTextVerCodeReq, opts ...grpc.CallOption) (*SendTextVerCodeRsp, error)
	// UserPswdLogin 用户账号密码登录
	UserPswdLogin(ctx context.Context, in *UserPswdLoginReq, opts ...grpc.CallOption) (*UserPswdLoginRsp, error)
	// UserPhoneLogin 用户手机账号登录
	UserPhoneLogin(ctx context.Context, in *UserPhoneLoginReq, opts ...grpc.CallOption) (*UserPhoneLoginRsp, error)
	// 用户注册
	UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterRsp, error)
	// 忘记密码
	ResetPswd(ctx context.Context, in *ResetPswdReq, opts ...grpc.CallOption) (*ResetPswdRsp, error)
}

type loginClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginClient(cc grpc.ClientConnInterface) LoginClient {
	return &loginClient{cc}
}

func (c *loginClient) GetMachineVerify(ctx context.Context, in *GetMachineVerifyReq, opts ...grpc.CallOption) (*GetMachineVerifyRsp, error) {
	out := new(GetMachineVerifyRsp)
	err := c.cc.Invoke(ctx, "/login_proto.Login/GetMachineVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) SendMachineVerifyResult(ctx context.Context, in *SendMachineVerifyResultReq, opts ...grpc.CallOption) (*SendMachineVerifyResultRsp, error) {
	out := new(SendMachineVerifyResultRsp)
	err := c.cc.Invoke(ctx, "/login_proto.Login/SendMachineVerifyResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) SendTextVerCode(ctx context.Context, in *SendTextVerCodeReq, opts ...grpc.CallOption) (*SendTextVerCodeRsp, error) {
	out := new(SendTextVerCodeRsp)
	err := c.cc.Invoke(ctx, "/login_proto.Login/SendTextVerCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) UserPswdLogin(ctx context.Context, in *UserPswdLoginReq, opts ...grpc.CallOption) (*UserPswdLoginRsp, error) {
	out := new(UserPswdLoginRsp)
	err := c.cc.Invoke(ctx, "/login_proto.Login/UserPswdLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) UserPhoneLogin(ctx context.Context, in *UserPhoneLoginReq, opts ...grpc.CallOption) (*UserPhoneLoginRsp, error) {
	out := new(UserPhoneLoginRsp)
	err := c.cc.Invoke(ctx, "/login_proto.Login/UserPhoneLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterRsp, error) {
	out := new(UserRegisterRsp)
	err := c.cc.Invoke(ctx, "/login_proto.Login/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) ResetPswd(ctx context.Context, in *ResetPswdReq, opts ...grpc.CallOption) (*ResetPswdRsp, error) {
	out := new(ResetPswdRsp)
	err := c.cc.Invoke(ctx, "/login_proto.Login/ResetPswd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginServer is the server API for Login service.
type LoginServer interface {
	// 获取人机验证问题
	GetMachineVerify(context.Context, *GetMachineVerifyReq) (*GetMachineVerifyRsp, error)
	// 发送人机验证结果
	SendMachineVerifyResult(context.Context, *SendMachineVerifyResultReq) (*SendMachineVerifyResultRsp, error)
	// 发送短信验证码
	SendTextVerCode(context.Context, *SendTextVerCodeReq) (*SendTextVerCodeRsp, error)
	// UserPswdLogin 用户账号密码登录
	UserPswdLogin(context.Context, *UserPswdLoginReq) (*UserPswdLoginRsp, error)
	// UserPhoneLogin 用户手机账号登录
	UserPhoneLogin(context.Context, *UserPhoneLoginReq) (*UserPhoneLoginRsp, error)
	// 用户注册
	UserRegister(context.Context, *UserRegisterReq) (*UserRegisterRsp, error)
	// 忘记密码
	ResetPswd(context.Context, *ResetPswdReq) (*ResetPswdRsp, error)
}

// UnimplementedLoginServer can be embedded to have forward compatible implementations.
type UnimplementedLoginServer struct {
}

func (*UnimplementedLoginServer) GetMachineVerify(context.Context, *GetMachineVerifyReq) (*GetMachineVerifyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineVerify not implemented")
}
func (*UnimplementedLoginServer) SendMachineVerifyResult(context.Context, *SendMachineVerifyResultReq) (*SendMachineVerifyResultRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMachineVerifyResult not implemented")
}
func (*UnimplementedLoginServer) SendTextVerCode(context.Context, *SendTextVerCodeReq) (*SendTextVerCodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTextVerCode not implemented")
}
func (*UnimplementedLoginServer) UserPswdLogin(context.Context, *UserPswdLoginReq) (*UserPswdLoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPswdLogin not implemented")
}
func (*UnimplementedLoginServer) UserPhoneLogin(context.Context, *UserPhoneLoginReq) (*UserPhoneLoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPhoneLogin not implemented")
}
func (*UnimplementedLoginServer) UserRegister(context.Context, *UserRegisterReq) (*UserRegisterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (*UnimplementedLoginServer) ResetPswd(context.Context, *ResetPswdReq) (*ResetPswdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPswd not implemented")
}

func RegisterLoginServer(s *grpc.Server, srv LoginServer) {
	s.RegisterService(&_Login_serviceDesc, srv)
}

func _Login_GetMachineVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineVerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).GetMachineVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login_proto.Login/GetMachineVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).GetMachineVerify(ctx, req.(*GetMachineVerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_SendMachineVerifyResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMachineVerifyResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).SendMachineVerifyResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login_proto.Login/SendMachineVerifyResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).SendMachineVerifyResult(ctx, req.(*SendMachineVerifyResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_SendTextVerCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTextVerCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).SendTextVerCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login_proto.Login/SendTextVerCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).SendTextVerCode(ctx, req.(*SendTextVerCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_UserPswdLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPswdLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).UserPswdLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login_proto.Login/UserPswdLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).UserPswdLogin(ctx, req.(*UserPswdLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_UserPhoneLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPhoneLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).UserPhoneLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login_proto.Login/UserPhoneLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).UserPhoneLogin(ctx, req.(*UserPhoneLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login_proto.Login/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).UserRegister(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_ResetPswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPswdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).ResetPswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login_proto.Login/ResetPswd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).ResetPswd(ctx, req.(*ResetPswdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Login_serviceDesc = grpc.ServiceDesc{
	ServiceName: "login_proto.Login",
	HandlerType: (*LoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMachineVerify",
			Handler:    _Login_GetMachineVerify_Handler,
		},
		{
			MethodName: "SendMachineVerifyResult",
			Handler:    _Login_SendMachineVerifyResult_Handler,
		},
		{
			MethodName: "SendTextVerCode",
			Handler:    _Login_SendTextVerCode_Handler,
		},
		{
			MethodName: "UserPswdLogin",
			Handler:    _Login_UserPswdLogin_Handler,
		},
		{
			MethodName: "UserPhoneLogin",
			Handler:    _Login_UserPhoneLogin_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _Login_UserRegister_Handler,
		},
		{
			MethodName: "ResetPswd",
			Handler:    _Login_ResetPswd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocal/login_proto/login_proto.proto",
}
